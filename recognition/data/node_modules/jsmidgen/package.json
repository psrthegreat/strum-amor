{
  "name": "jsmidgen",
  "version": "0.1.2",
  "author": {
    "name": "Dave Ingram",
    "email": "npm@dmi.me.uk"
  },
  "description": "a pure-JavaScript MIDI file generator",
  "main": "./lib/jsmidgen.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/dingram/jsmidgen.git"
  },
  "keywords": [
    "midi",
    "mid",
    "generate",
    "generator",
    "library"
  ],
  "license": "MIT",
  "engine": {
    "node": ">=0.6"
  },
  "readme": "# jsmidgen, a pure-JavaScript MIDI file library\n\n## Introduction\n\njsmidgen (pronounced jay-smidgen or jer-smidgen) is a library that can be used\nto generate MIDI files in JavaScript. It currently provides output as a string,\nbut there are plans to provide multiple output formats, including base64 and\ndata URI.\n\n## Example Usage\n\nThe MIDI file structure is made up of one or more tracks, which contain one or\nmore events. These events can be note on/off events, instrument changes, tempo\nchanges, or more exotic things. A basic example is shown below:\n\n    var fs = require('fs');\n    var Midi = require('jsmidgen');\n    \n    var file = new Midi.File();\n    var track = new Midi.Track();\n    file.addTrack(track);\n    \n    track.addNote(0, 'c4', 64);\n    track.addNote(0, 'd4', 64);\n    track.addNote(0, 'e4', 64);\n    track.addNote(0, 'f4', 64);\n    track.addNote(0, 'g4', 64);\n    track.addNote(0, 'a4', 64);\n    track.addNote(0, 'b4', 64);\n    track.addNote(0, 'c5', 64);\n\n    fs.writeFileSync('test.mid', file.toBytes(), 'binary');\n\nThis example will create a MIDI file that will play an ascending C major scale,\nstarting at middle C.\n\n## Fluid API\n\nThis library also has rudimentary support for a fluid (chained) style:\n\n    file = new Midi.File();\n    file\n      .addTrack()\n    \n        .note(0, 'c4', 32)\n        .note(0, 'd4', 32)\n        .note(0, 'e4', 32)\n        .note(0, 'f4', 32)\n        .note(0, 'g4', 32)\n        .note(0, 'a4', 32)\n        .note(0, 'b4', 32)\n        .note(0, 'c5', 32)\n    \n        // church organ\n        .instrument(0, 0x13)\n    \n        .noteOn(0, 'c4', 64)\n        .noteOn(0, 'e4')\n        .noteOn(0, 'g4')\n        .noteOff(0, 'c4', 47)\n        .noteOff(0, 'e4')\n        .noteOff(0, 'g4')\n    \n        .noteOn(0, 'c4', 1)\n        .noteOn(0, 'e4')\n        .noteOn(0, 'g4')\n        .noteOff(0, 'c4', 384)\n        .noteOff(0, 'e4')\n        .noteOff(0, 'g4')\n        ;\n    \n    fs.writeFileSync('test2.mid', file.toBytes(), 'binary');\n\nNote the use of `setInstrument()` to change to a church organ midway through,\nand the use of `addNoteOn()`/`addNoteOff()` to produce chords.\n\n## Reference\n\n### Midi.File\n\n - `addTrack()` - Add a new Track object to the file and return the new track\n - `addTrack(track)` - Add the given Track object to the file and return the file\n\n### Midi.Track\n\nNote: time and duration are specified in \"ticks\", and there is a hardcoded\nvalue of 128 ticks per beat. This means that a quarter note has a duration of\n128.\n\n - `addNote(channel, pitch, duration[, time[, velocity]])`\n   \n   **Add a new note with the given channel, pitch, and duration**\n   - If `time` is given, delay that many ticks before starting the note\n   - If `velocity` is given, strike the note with that velocity\n - `addNoteOn(channel, pitch[, time[, velocity]])`\n   \n   **Start a new note with the given channel and pitch**\n   - If `time` is given, delay that many ticks before starting the note\n   - If `velocity` is given, strike the note with that velocity\n - `addNoteOff(channel, pitch[, time[, velocity]])`\n   \n   **End a note with the given channel and pitch**\n   - If `time` is given, delay that many ticks before ending the note\n   - If `velocity` is given, strike the note with that velocity\n - `setInstrument(channel, instrument[, time])`\n   \n   **Change the given channel to the given instrument**\n   - If `time` is given, delay that many ticks before making the change\n - `setTempo(bpm[, time])`\n   \n   **Set the tempo to `bpm` beats per minute**\n   - If `time` is given, delay that many ticks before making the change\n",
  "_id": "jsmidgen@0.1.2",
  "dist": {
    "shasum": "6b2aea5a995092ea508dcfacb32688a473452f6d"
  },
  "_from": "jsmidgen"
}
